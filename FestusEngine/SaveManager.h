#pragma once

class GameObject;
class GameComponent;



//Save data generated by an GameObject. 
struct ObjectSaveData {
	Transform* transform;

	string* name;

	std::vector<MappedValues*> componentData;

	std::vector<ObjectSaveData> childSaveData;

};

//Function that is used to load any GameComponent
typedef GameComponent* (*LoadInstanceFunction)(GameObject*, const MappedValues&);

//Class that manages all saving and loading. 
class SaveManager {
public:

	SaveManager();

	//Loads a GameObject tree from a JSON file created by save().
	GameObject* load(const std::string& filename);

	//Creates a JSON file that includes all GameObject and component data.
	void save(GameObject* root);

	//Sets the file used for saving
	void setSaveFile(const string& savefile);

	//Registers a load function, only called from REGISTERLOAD macro
	static void registerLoad(const string& name, LoadInstanceFunction function);

private:
	string savefile;

};

